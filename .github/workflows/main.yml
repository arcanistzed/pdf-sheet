name: Release Creation

on:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # Substitute the Manifest and Download URLs in the module.json
    - name: Substitute Manifest and Download Links For Versioned Ones
      id: sub_manifest_link_version
      uses: microsoft/variable-substitution@v1
      with:
        files: 'module.json'
      env:
        version: ${{github.event.release.tag_name}}
        url: https://github.com/${{github.repository}}
        manifest: https://github.com/${{github.repository}}/releases/latest/download/module.json
        download: https://github.com/${{github.repository}}/releases/download/${{github.event.release.tag_name}}/module.zip

    # Create a zip file with all files required by the module to add to the release
    - run: zip -r ./module.zip module.json README.md LICENSE CHANGELOG.md styles/ scripts/ templates/ languages/ mappings/

    # Create a release for this specific version
    - name: Update Release with Files
      id: create_version_release
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true # Set this to false if you want to prevent updating existing releases
        name: ${{ github.event.release.name }}
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: './module.json, ./module.zip'
        tag: ${{ github.event.release.tag_name }}
        body: ${{ github.event.release.body }}

    # Extract metadata from module.json
    - name: Extract module metadata
      id: extract_metadata
      run: |
        echo "MODULE_ID=$(jq -r .id module.json)" >> $GITHUB_ENV
        echo "MIN_COMPAT=$(jq -r .compatibility.minimum module.json)" >> $GITHUB_ENV
        echo "VERIFIED_COMPAT=$(jq -r .compatibility.verified module.json)" >> $GITHUB_ENV
        MAX_COMPAT=$(jq -r '.compatibility.maximum // ""' module.json)
        echo "MAX_COMPAT=$MAX_COMPAT" >> $GITHUB_ENV

    # Publish to FoundryVTT using the API
    - name: Publish to FoundryVTT
      env:
        API_TOKEN: ${{ secrets.FOUNDRY_API_TOKEN }}
      run: |
        curl -X POST https://api.foundryvtt.com/_api/packages/release_version \
          -H "Content-Type: application/json" \
          -H "Authorization: $API_TOKEN" \
          -d '{
            "id": "'"$MODULE_ID"'",
            "release": {
              "version": "${{ github.event.release.tag_name }}",
              "manifest": "https://github.com/${{ github.repository }}/releases/download/${{ github.event.release.tag_name }}/module.json",
              "notes": "https://github.com/${{ github.repository }}/releases/tag/${{ github.event.release.tag_name }}",
              "compatibility": {
                "minimum": "'"$MIN_COMPAT"'",
                "verified": "'"$VERIFIED_COMPAT"'",
                "maximum": "'"$MAX_COMPAT"'"
              }
            }
          }'
