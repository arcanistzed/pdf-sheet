function() {
    /*
    Pathfinder 2e Charactersheet Remastered mapping for Foundry VTT module 'Export Sheet to PDF' - 17/09/2023
    Author: [Bushvin](https://github.com/bushvin)
    Version: 1.0.3

    Based off Pathfinder2e character sheet mapping
    Original PDF: https://drive.google.com/file/d/1GKtOprwITSUP1sXCLXjqKc-N9JvwmgGy/view
    Minimum requirements: Foundry VTT Version 11 | PF2e system version 5.5.1
    Latest verified: Foundry VTT Version 11.315 | PF2e system version 5.8.3

    TODO:
    - find a way to link <ATTRIBUTE>_Partial
    - standardize pdf field names (skills, ...)
    - PDF:background_notes, PDF:class_notes
    - improve attack statistics to include 2nd and 3rd attacks
    - Add Boosts to ancestry section
    */
    const SemVer = class {
        _parse_version(version) {
            version = version.split(/\.(.*)/s);
            let _major = parseInt(version[0]);
            version = version[1].split(/\.(.*)/s);
            let _minor = parseInt(version[0]);
            version = version[1].split(/-(.*)/s);
            let _bugfix = parseInt(version[0]);
            let _release = version[1];
            return [_major, _minor, _bugfix, _release];
        };

        eq(version0, version1) {
            version0 = this._parse_version(version0);
            version1 = this._parse_version(version1);
            if (JSON.stringify(version0) == JSON.stringify(version1)) {
                return true;
            };
            return false;
        };

        gt(version0, version1) {
            version0 = this._parse_version(version0);
            version1 = this._parse_version(version1);
            if (version0[0] > version1[0]) {
                return true;
            } else if ( version0[0] == version1[0] ) {
                if (version0[1] > version1[1]) {
                    return true;
                } else if (version0[1] == version1[1]) {
                    if (version0[2] > version1[2]) {
                        return true;
                    };
                };
            };
            return false;
        };

        gte(version0, version1) {
            if (this.eq(version0, version1)) {
                return true;
            };
            return this.gt(version0, version1);
        };

        lt(version0, version1) {
            version0 = this._parse_version(version0);
            version1 = this._parse_version(version1);
            if (version0[0] < version1[0]) {
                return true;
            } else if ( version0[0] == version1[0] ) {
                if (version0[1] < version1[1]) {
                    return true;
                } else if (version0[1] == version1[1]) {
                    if (version0[2] < version1[2]) {
                        return true;
                    };
                };
            };
            return false;

        };
    };
    const format_mod = function(mod) {
        if (typeof(mod) === "undefined") {
            return mod;
        };
        return (parseInt(mod) < 0) ? mod : `+${mod}`;
    };

    const foundryvtt_version = game.release.generation;
    const semver = new SemVer();
    if (foundryvtt_version < 11) {
        ui.notifications.error(
            "PDF Sheet | Pathfinder 2e remaster | This version of Foundry VTT is no longer supported with the pf2e remaster mapping."
        );
    };
    const pf2e_version = game.system.version;
    if (semver.lt(pf2e_version, "5.8.3")) {
        ui.notifications.error(
            "PDF Sheet | Pathfinder 2e remaster | This version of the pf2e system is unsupported. Consider upgrading to 5.8.3 or 5.9.x."
        );
        return [];
    } else if (semver.eq(pf2e_version, "5.8.3")) {
        ui.notifications.warn(
            "PDF Sheet | Pathfinder 2e remaster | The pf2e system v5.8.3 is in Long Term Support until (TBD), but please consider upgrading 5.9.x."
        );
    };
    const actordata = actor;
    const spellcasting_traditions = ["arcane", "occult", "primal", "divine"];
    const prepared_types = ["prepared", "spontaneous"];
    let ret = [

        /* Ancestry Section*/
        { "pdf": "ancestry", "foundry": actordata.ancestry.name },
        { "pdf": "heritage_and_traits", "foundry": actordata.heritage.name },
        { "pdf": "size", "foundry": actordata.system.traits.size.value },

        /* Character Name Section*/
        { "pdf": "character_name", "foundry": actordata.name },
        { "pdf": "player_name", "foundry": Object.entries(actordata.ownership).filter(i => i[1] === 3).map(i => i[0]).map(id => !game.users.get(id)?.isGM ? game.users.get(id)?.name : null).filter(x => x).join(", ") },

        /* Background Section */
        { "pdf": "background", "foundry": actordata.background.name },
        { "pdf": "background_notes", "foundry": "" },

        /* Level Section */
        { "pdf": "level", "foundry": actordata.system.details.level.value },
        { "pdf": "xp", "foundry": actordata.system.details.xp.value },

        /* Hero Points */
        { "pdf": "hero_point_1", "foundry": actordata.system.resources.heroPoints.value >= 1 || '' },
        { "pdf": "hero_point_2", "foundry": actordata.system.resources.heroPoints.value >= 2 || '' },
        { "pdf": "hero_point_3", "foundry": actordata.system.resources.heroPoints.value >= 3 || '' },

        /* Class Section */
        { "pdf": "class", "foundry": actordata.class.name },
        { "pdf": "class_notes", "foundry": "" },

        /* Sttributes Section */
        { "pdf": "str", "foundry": format_mod(actordata.abilities.str.mod) },
        { "pdf": "str_partial", "foundry": false },
        { "pdf": "dex", "foundry": format_mod(actordata.abilities.dex.mod) },
        { "pdf": "dex_partial", "foundry": false },
        { "pdf": "con", "foundry": format_mod(actordata.abilities.con.mod) },
        { "pdf": "con_partial", "foundry": false },
        { "pdf": "int", "foundry": format_mod(actordata.abilities.int.mod) },
        { "pdf": "int_partial", "foundry": false },
        { "pdf": "wis", "foundry": format_mod(actordata.abilities.wis.mod) },
        { "pdf": "wis_partial", "foundry": false },
        { "pdf": "cha", "foundry": format_mod(actordata.abilities.cha.mod) },
        { "pdf": "cha_partial", "foundry": false },

        /* Defenses Section*/

        /* Armor Class */
        { "pdf": "ac", "foundry": actordata.armorClass.value },
        { "pdf": "ac_attribute_modifier", "foundry": actordata.armorClass.modifiers.filter(i => i.type === 'ability').map(i => i.modifier)[0] || 0 },
        { "pdf": "ac_proficiency_modifier", "foundry": actordata.armorClass.modifiers.filter(i => i.type === 'proficiency').map(i => i.modifier)[0] || 0 },
        { "pdf": "ac_item_modifier", "foundry": actordata.armorClass.modifiers.filter(i => i.type === 'item').map(i => i.modifier)[0] || 0 },

        /* Shield */
        { "pdf": "ac_shield_bonus", "foundry": actordata.items.filter(i => i.system.category === 'shield' && i.isEquipped).map(i => i.system.acBonus)[0] || '' },
        { "pdf": "shield_hardness", "foundry": actordata.items.filter(i => i.system.category === 'shield' && i.isEquipped).map(i => i.system.hardness)[0] || '-' },
        { "pdf": "shield_max_hp", "foundry": actordata.items.filter(i => i.system.category === 'shield' && i.isEquipped).map(i => i.system.hp.max)[0] || '-' },
        { "pdf": "shield_bt", "foundry": actordata.items.filter(i => i.system.category === 'shield' && i.isEquipped).map(i => i.system.hp.brokenThreshold)[0] || '-' },
        { "pdf": "shield_current_hp", "foundry": actordata.items.filter(i => i.system.category === 'shield' && i.isEquipped).map(i => i.system.hp.value)[0] || '-' },

        /* Armor proficiencies */
        { "pdf": "defense_unarmored_trained", "foundry": actordata.system.proficiencies.defenses.unarmored.rank >= 1 || false },
        { "pdf": "defense_unarmored_expert", "foundry": actordata.system.proficiencies.defenses.unarmored.rank >= 2 || false },
        { "pdf": "defense_unarmored_master", "foundry": actordata.system.proficiencies.defenses.unarmored.rank >= 3 || false },
        { "pdf": "defense_unarmored_legendary", "foundry": actordata.system.proficiencies.defenses.unarmored.rank >= 4 || false },
        { "pdf": "defense_light_trained", "foundry": actordata.system.proficiencies.defenses.light.rank >= 1 || false },
        { "pdf": "defense_light_expert", "foundry": actordata.system.proficiencies.defenses.light.rank >= 2 || false },
        { "pdf": "defense_light_master", "foundry": actordata.system.proficiencies.defenses.light.rank >= 3 || false },
        { "pdf": "defense_light_legendary", "foundry": actordata.system.proficiencies.defenses.light.rank >= 4 || false },
        { "pdf": "defense_medium_trained", "foundry": actordata.system.proficiencies.defenses.medium.rank >= 1 || false },
        { "pdf": "defense_medium_expert", "foundry": actordata.system.proficiencies.defenses.medium.rank >= 2 || false },
        { "pdf": "defense_medium_master", "foundry": actordata.system.proficiencies.defenses.medium.rank >= 3 || false },
        { "pdf": "defense_medium_legendary", "foundry": actordata.system.proficiencies.defenses.medium.rank >= 4 || false },
        { "pdf": "defense_heavy_trained", "foundry": actordata.system.proficiencies.defenses.heavy.rank >= 1 || false },
        { "pdf": "defense_heavy_expert", "foundry": actordata.system.proficiencies.defenses.heavy.rank >= 2 || false },
        { "pdf": "defense_heavy_master", "foundry": actordata.system.proficiencies.defenses.heavy.rank >= 3 || false },
        { "pdf": "defense_heavy_legendary", "foundry": actordata.system.proficiencies.defenses.heavy.rank >= 4 || false },

        /* Saving Throws */
        { "pdf": "fortitude", "foundry": '+' + actordata.saves.fortitude.mod },
        { "pdf": "fortitude_attribute_modifier", "foundry": actordata.saves.fortitude.modifiers.filter(i => i.type === 'ability' && i.enabled).map(i => i.modifier) || 0 },
        { "pdf": "fortitude_proficiency_modifier", "foundry": actordata.saves.fortitude.modifiers.filter(i => i.type === 'proficiency' && i.enabled).map(i => i.modifier) || 0 },
        { "pdf": "fortitude_item_modifier", "foundry": actordata.saves.fortitude.modifiers.filter(i => i.type === 'item' && i.enabled).map(i => i.modifier) || 0 },
        { "pdf": "fortitude_trained", "foundry": actordata.saves.fortitude.rank >= 1 || '' },
        { "pdf": "fortitude_expert", "foundry": actordata.saves.fortitude.rank >= 2 || '' },
        { "pdf": "fortitude_master", "foundry": actordata.saves.fortitude.rank >= 3 || '' },
        { "pdf": "fortitude_legendary", "foundry": actordata.saves.fortitude.rank >= 4 || '' },

        { "pdf": "reflex", "foundry": '+' + actordata.saves.reflex.mod },
        { "pdf": "reflex_attribute_modifier", "foundry": actordata.saves.reflex.modifiers.filter(i => i.type === 'ability' && i.enabled).map(i => i.modifier) || 0 },
        { "pdf": "reflex_proficiency_modifier", "foundry": actordata.saves.reflex.modifiers.filter(i => i.type === 'proficiency' && i.enabled).map(i => i.modifier) || 0 },
        { "pdf": "reflex_item_modifier", "foundry": actordata.saves.reflex.modifiers.filter(i => i.type === 'item' && i.enabled).map(i => i.modifier) || 0 },
        { "pdf": "reflex_trained", "foundry": actordata.saves.reflex.rank >= 1 || '' },
        { "pdf": "reflex_expert", "foundry": actordata.saves.reflex.rank >= 2 || '' },
        { "pdf": "reflex_master", "foundry": actordata.saves.reflex.rank >= 3 || '' },
        { "pdf": "reflex_legendary", "foundry": actordata.saves.reflex.rank >= 4 || '' },

        { "pdf": "will", "foundry": '+' + actordata.saves.will.mod },
        { "pdf": "will_attribute_modifier", "foundry": actordata.saves.will.modifiers.filter(i => i.type === 'ability' && i.enabled).map(i => i.modifier) || 0 },
        { "pdf": "will_proficiency_modifier", "foundry": actordata.saves.will.modifiers.filter(i => i.type === 'proficiency' && i.enabled).map(i => i.modifier) || 0 },
        { "pdf": "will_item_modifier", "foundry": actordata.saves.will.modifiers.filter(i => i.type === 'item' && i.enabled).map(i => i.modifier) || 0 },
        { "pdf": "will_trained", "foundry": actordata.saves.will.rank >= 1 || '' },
        { "pdf": "will_expert", "foundry": actordata.saves.will.rank >= 2 || '' },
        { "pdf": "will_master", "foundry": actordata.saves.will.rank >= 3 || '' },
        { "pdf": "will_legendary", "foundry": actordata.saves.will.rank >= 4 || '' },

        { "pdf": "defense_notes", "foundry":
                'FOR: ' + actordata.saves.fortitude.modifiers.filter(i => i.type === 'item' || i.type === 'untyped').map(i => ' ' + (i.slug ? i.slug : i.label) + ' ' + (i.modifier < 0 ? '' : '+') + i.modifier) + ' \n' +
                'REF: ' + actordata.saves.reflex.modifiers.filter(i => i.type === 'item' || i.type === 'untyped').map(i => ' ' + (i.slug ? i.slug : i.label) + ' ' + (i.modifier < 0 ? '' : '+') + i.modifier) + ' \n' +
                'WILL: ' + actordata.saves.will.modifiers.filter(i => i.type === 'item' || i.type === 'untyped').map(i => ' ' + (i.slug ? i.slug : i.label) + ' ' + (i.modifier < 0 ? '' : '+') + i.modifier)
        },

        /* Hit Points Section*/
        { "pdf": "hp_max", "foundry": actordata.hitPoints.max },
        { "pdf": "hp_current", "foundry": actordata.hitPoints.value },
        { "pdf": "hp_temp", "foundry": actordata.hitPoints.temp },

        { "pdf": "dying_1", "foundry": actordata.system.attributes.dying.value >= 1 || false },
        { "pdf": "dying_2", "foundry": actordata.system.attributes.dying.value >= 2 || false },
        { "pdf": "dying_3", "foundry": actordata.system.attributes.dying.value >= 3 || false },
        { "pdf": "dying_4", "foundry": actordata.system.attributes.dying.value >= 4 || false },
        { "pdf": "wounded", "foundry": actordata.system.attributes.wounded.value + '/' + actordata.system.attributes.wounded.max },
        { "pdf": "resistances_immunities", "foundry": ['R: ' + actordata.system.attributes.resistances.map(i => ' ' + i.type + ' ' + i.value), '\nI: ' + actordata.system.attributes.immunities.map(i => i.type)].filter(x => String(x)).join(", ").trim() },
        { "pdf": "conditions", "foundry": actordata.conditions.map(i => i.name).join(", ") },

        /* Skills Section */
        /* Dedicated for loop at the end*/
        { "pdf": "skill_notes", "foundry": "" },

        /* Lore Skills */
        /* Dedicated for loop at the end*/

        /* Languages Section */
        { "pdf": "languages", "foundry": actordata.system.traits.languages.value.concat([actordata.system.traits.languages.custom]).filter(function(a) {return a.trim() != ''}).join(", ") },

        /* Perception Section  */
        { "pdf": "perception", "foundry": format_mod(actordata.perception.mod) },
        { "pdf": "perception_attribute_modifier", "foundry": actordata.perception.modifiers.filter(i => i.type === 'ability' && i.enabled).map(i => i.modifier)[0] || 0 },
        { "pdf": "perception_proficiency_modifier", "foundry": actordata.perception.modifiers.filter(i => i.type === 'proficiency' && i.enabled).map(i => i.modifier)[0] || 0 },
        { "pdf": "perception_item_modifier", "foundry": actordata.perception.modifiers.filter(i => i.type === 'item' && i.enabled).map(i => i.modifier)[0] || 0 },
        { "pdf": "perception_trained", "foundry": actordata.perception.rank >= 1 || '' },
        { "pdf": "perception_expert", "foundry": actordata.perception.rank >= 2 || '' },
        { "pdf": "perception_master", "foundry": actordata.perception.rank >= 3 || '' },
        { "pdf": "perception_legendary", "foundry": actordata.perception.rank >= 4 || '' },

        { "pdf": "senses_notes", "foundry": actordata.system.traits.senses.filter(i => i.type).map(i => i.label).join(", ") + ' \n' + actordata.system.attributes.perception.modifiers.filter(i => i.type === 'item' || i.type === 'untyped').map(i => ' ' + (i.slug ? i.slug : i.label) + ' ' + (i.modifier < 0 ? '' : '+') + i.modifier).join(", ") },

        /* Speed Section */
        { "pdf": "speed", "foundry":
            actordata.system.attributes.speed.value + actordata.system.attributes.speed.totalModifier + actordata.items.filter(i => i.type === 'armor' && i.isEquipped ).map(i => i.speedPenalty).reduce((a,v) => {return a+v},0)
        },
        {
            "pdf": "special_movement", "foundry":
                actordata.system.attributes.speed.otherSpeeds.map(i => ' ' + i.label + ' ' + i.value).join(", ") + ' \n' +
                actordata.system.attributes.speed.modifiers.map(i => ' ' + (i.slug ? i.slug : i.label) + ' ' + (i.modifier < 0 ? '' : '+') + i.modifier).join(", ")
        },

        /* Strikes Section */
        /* Melee Strikes */
        /* Dedicated for loop at the end*/
        /* Ranged Strikes */
        /* Dedicated for loop at the end*/
        /* Weapon Proficiencies */
        { "pdf": "attack_unarmed_trained", "foundry": actordata.system.proficiencies.attacks.unarmed.rank >= 1 || false },
        { "pdf": "attack_unarmed_expert", "foundry": actordata.system.proficiencies.attacks.unarmed.rank >= 2 || false },
        { "pdf": "attack_unarmed_master", "foundry": actordata.system.proficiencies.attacks.unarmed.rank >= 3 || false },
        { "pdf": "attack_unarmed_legendary", "foundry": actordata.system.proficiencies.attacks.unarmed.rank >= 4 || false },

        { "pdf": "attack_simple_trained", "foundry": actordata.system.proficiencies.attacks.simple.rank >= 1 || false },
        { "pdf": "attack_simple_expert", "foundry": actordata.system.proficiencies.attacks.simple.rank >= 2 || false },
        { "pdf": "attack_simple_master", "foundry": actordata.system.proficiencies.attacks.simple.rank >= 3 || false },
        { "pdf": "attack_simple_legendary", "foundry": actordata.system.proficiencies.attacks.simple.rank >= 4 || false },

        { "pdf": "attack_martial_trained", "foundry": actordata.system.proficiencies.attacks.martial.rank >= 1 || false },
        { "pdf": "attack_martial_expert", "foundry": actordata.system.proficiencies.attacks.martial.rank >= 2 || false },
        { "pdf": "attack_martial_master", "foundry": actordata.system.proficiencies.attacks.martial.rank >= 3 || false },
        { "pdf": "attack_martial_legendary", "foundry": actordata.system.proficiencies.attacks.martial.rank >= 4 || false },

        { "pdf": "attack_advanced_trained", "foundry": actordata.system.proficiencies.attacks.advanced.rank >= 1 || false },
        { "pdf": "attack_advanced_expert", "foundry": actordata.system.proficiencies.attacks.advanced.rank >= 2 || false },
        { "pdf": "attack_advanced_master", "foundry": actordata.system.proficiencies.attacks.advanced.rank >= 3 || false },
        { "pdf": "attack_advanced_legendary", "foundry": actordata.system.proficiencies.attacks.advanced.rank >= 4 || false },

        { "pdf": "attack_other_trained", "foundry": false },
        { "pdf": "attack_other_expert", "foundry": false },
        { "pdf": "attack_other_master", "foundry": false },
        { "pdf": "attack_other_legendary", "foundry": false },

        /* FIXME: fill out attack_other_notes */
        { "pdf": "attack_other_notes", "foundry": '' },
        /* FIXME: fill out critical_specializations */
        { "pdf": "critical_specializations", "foundry": '' },

        /* Class DC Section */
        { "pdf": "class_dc", "foundry": actordata.classDC.mod + 10 },
        { "pdf": "class_dc_attribute_modifier", "foundry": actordata.classDC.attributeModifier.value },
        { "pdf": "class_dc_proficiency_modifier", "foundry": actordata.classDC.modifiers.filter(i => i.type === 'proficiency').map(i => i.modifier)[0] || 0 },
        { "pdf": "class_dc_item_modifier", "foundry": actordata.classDC.modifiers.filter(i => i.type === 'item').map(i => i.modifier)[0] || 0 },

        /* Ancestry and General Feats Section*/
        { "pdf": "1_ancestry_hertitage_abilities", "foundry":
            actordata.items.filter(i => i.type === 'feat' && (i.category === 'ancestryfeature' || i.category == 'heritage'))
                .sort( (a,b) => (a.name < b.name ? -1 : (a.name > b.name ? 1 : 0)) )
                .map(i => i.name).join(', ')
        },
        { "pdf": "1_ancestry_feat", "foundry": actordata.items.filter(i => i.type === 'feat' && i.system.location === 'ancestry-1').map(i => i.name)[0] || '' },
        { "pdf": "1_background_skill_feat" , "foundry": actordata.background.system.items[Object.keys(actordata.background.system.items)[0]].name },
        { "pdf": "2_skill_feat", "foundry": actordata.items.filter(i => i.type === 'feat' && i.system.location === 'skill-2').map(i => i.name)[0] || '' },
        { "pdf": "3_general_feat", "foundry": actordata.items.filter(i => i.type === 'feat' && i.system.location === 'general-3').map(i => i.name)[0] || '' },
        { "pdf": "4_skill_feat", "foundry": actordata.items.filter(i => i.type === 'feat' && i.system.location === 'skill-4').map(i => i.name)[0] || '' },
        { "pdf": "5_ancestry_feat", "foundry": actordata.items.filter(i => i.type === 'feat' && i.system.location === 'ancestry-5').map(i => i.name)[0] || '' },
        { "pdf": "6_skill_feat", "foundry": actordata.items.filter(i => i.type === 'feat' && i.system.location === 'skill-6').map(i => i.name)[0] || '' },
        { "pdf": "7_general_feat", "foundry": actordata.items.filter(i => i.type === 'feat' && i.system.location === 'general-7').map(i => i.name)[0] || '' },
        { "pdf": "8_skill_feat", "foundry": actordata.items.filter(i => i.type === 'feat' && i.system.location === 'skill-8').map(i => i.name)[0] || '' },
        { "pdf": "9_ancestry_feat", "foundry": actordata.items.filter(i => i.type === 'feat' && i.system.location === 'ancestry-9').map(i => i.name)[0] || '' },
        { "pdf": "10_skill_feat", "foundry": actordata.items.filter(i => i.type === 'feat' && i.system.location === 'skill-10').map(i => i.name)[0] || '' },
        { "pdf": "11_general_feat", "foundry": actordata.items.filter(i => i.type === 'feat' && i.system.location === 'general-11').map(i => i.name)[0] || '' },
        { "pdf": "12_skill_feat", "foundry": actordata.items.filter(i => i.type === 'feat' && i.system.location === 'skill-12').map(i => i.name)[0] || '' },
        { "pdf": "13_ancestry_feat", "foundry": actordata.items.filter(i => i.type === 'feat' && i.system.location === 'ancestry-13').map(i => i.name)[0] || '' },
        { "pdf": "14_skill_feat", "foundry": actordata.items.filter(i => i.type === 'feat' && i.system.location === 'skill-14').map(i => i.name)[0] || '' },
        { "pdf": "15_general_feat", "foundry": actordata.items.filter(i => i.type === 'feat' && i.system.location === 'general-15').map(i => i.name)[0] || '' },
        { "pdf": "16_skill_feat", "foundry": actordata.items.filter(i => i.type === 'feat' && i.system.location === 'skill-16').map(i => i.name)[0] || '' },
        { "pdf": "17_ancestry_feat", "foundry": actordata.items.filter(i => i.type === 'feat' && i.system.location === 'ancestry-17').map(i => i.name)[0] || '' },
        { "pdf": "18_skill_feat", "foundry": actordata.items.filter(i => i.type === 'feat' && i.system.location === 'skill-18').map(i => i.name)[0] || '' },
        { "pdf": "19_general_feat", "foundry": actordata.items.filter(i => i.type === 'feat' && i.system.location === 'general-19').map(i => i.name)[0] || '' },
        { "pdf": "20_skill_feat", "foundry": actordata.items.filter(i => i.type === 'feat' && i.system.location === 'skill-20').map(i => i.name)[0] || '' },

        /* Class Abilities Section */
        { "pdf": "1_class_feats_features", "foundry":
            actordata.items.filter(i => i.type === 'feat' && i.system.level.value === 1 && (i.system.category === 'classfeature' || i.system.category === 'class'))
                .sort( (a,b) => (a.name < b.name ? -1 : (a.name > b.name ? 1 : 0)) )
                .map(i => i.name).join(", ") || ""
        },
        { "pdf": "2_class_feat", "foundry": actordata.items.filter(i => i.type === 'feat' && i.system.location === 'class-2').map(i => i.name)[0] || '' },
        { "pdf": "3_class_feature", "foundry":
            actordata.items.filter(i => i.type === 'feat' && i.system.category === 'classfeature' && i.system.level.value === 3)
                .sort( (a,b) => (a.name < b.name ? -1 : (a.name > b.name ? 1 : 0)) )
                .map(i => i.name)[0] || ""
        },
        { "pdf": "4_class_feat", "foundry": actordata.items.filter(i => i.type === 'feat' && i.system.location === 'class-4').map(i => i.name)[0] || '' },
        { "pdf": "5_class_feature", "foundry":
            actordata.items.filter(i => i.type === 'feat' && i.system.category === 'classfeature' && i.system.level.value === 5)
                .sort( (a,b) => (a.name < b.name ? -1 : (a.name > b.name ? 1 : 0)) )
                .map(i => i.name)[0] || ""
        },
        { "pdf": "6_class_feat", "foundry": actordata.items.filter(i => i.type === 'feat' && i.system.location === 'class-6').map(i => i.name)[0] || '' },
        { "pdf": "7_class_feature", "foundry":
            actordata.items.filter(i => i.type === 'feat' && i.system.category === 'classfeature' && i.system.level.value === 7)
                .sort( (a,b) => (a.name < b.name ? -1 : (a.name > b.name ? 1 : 0)) )
                .map(i => i.name)[0] || ""
            },
        { "pdf": "8_class_feat", "foundry": actordata.items.filter(i => i.type === 'feat' && i.system.location === 'class-8').map(i => i.name)[0] || '' },
        { "pdf": "9_class_feature", "foundry":
            actordata.items.filter(i => i.type === 'feat' && i.system.category === 'classfeature' && i.system.level.value === 9)
                .sort( (a,b) => (a.name < b.name ? -1 : (a.name > b.name ? 1 : 0)) )
                .map(i => i.name)[0] || ""
        },
        { "pdf": "10_class_feat", "foundry": actordata.items.filter(i => i.type === 'feat' && i.system.location === 'class-10').map(i => i.name)[0] || '' },
        { "pdf": "11_class_feature", "foundry":
            actordata.items.filter(i => i.type === 'feat' && i.system.category === 'classfeature' && i.system.level.value === 11)
                .sort( (a,b) => (a.name < b.name ? -1 : (a.name > b.name ? 1 : 0)) )
                .map(i => i.name)[0] || ""
        },
        { "pdf": "12_class_feat", "foundry": actordata.items.filter(i => i.type === 'feat' && i.system.location === 'class-12').map(i => i.name)[0] || '' },
        { "pdf": "13_class_feature", "foundry":
            actordata.items.filter(i => i.type === 'feat' && i.system.category === 'classfeature' && i.system.level.value === 13)
                .sort( (a,b) => (a.name < b.name ? -1 : (a.name > b.name ? 1 : 0)) )
                .map(i => i.name)[0] || ""
        },
        { "pdf": "14_class_feat", "foundry": actordata.items.filter(i => i.type === 'feat' && i.system.location === 'class-14').map(i => i.name)[0] || '' },
        { "pdf": "15_class_feature", "foundry":
            actordata.items.filter(i => i.type === 'feat' && i.system.category === 'classfeature' && i.system.level.value === 15)
                .sort( (a,b) => (a.name < b.name ? -1 : (a.name > b.name ? 1 : 0)) )
                .map(i => i.name)[0] || ""
        },
        { "pdf": "16_class_feat", "foundry": actordata.items.filter(i => i.type === 'feat' && i.system.location === 'class-16').map(i => i.name)[0] || '' },
        { "pdf": "17_class_feature", "foundry":
            actordata.items.filter(i => i.type === 'feat' && i.system.category === 'classfeature' && i.system.level.value === 17)
                .sort( (a,b) => (a.name < b.name ? -1 : (a.name > b.name ? 1 : 0)) )
                .map(i => i.name)[0] || ""
        },
        { "pdf": "18_class_feat", "foundry": actordata.items.filter(i => i.type === 'feat' && i.system.location === 'class-18').map(i => i.name)[0] || '' },
        { "pdf": "19_class_feature", "foundry":
            actordata.items.filter(i => i.type === 'feat' && i.system.category === 'classfeature' && i.system.level.value === 18)
                .sort( (a,b) => (a.name < b.name ? -1 : (a.name > b.name ? 1 : 0)) )
                .map(i => i.name)[0] || ""
        },
        { "pdf": "20_class_feat", "foundry": actordata.items.filter(i => i.type === 'feat' && i.system.location === 'class-20').map(i => i.name)[0] || '' },

        /* Inventory Section */
        {
            "pdf": "held_items", "foundry":
                actordata.inventory.filter(i => i.system.usage.type === 'held' && i.type !== 'consumable')
                    .sort( (a,b) => (a.name < b.name ? -1 : (a.name > b.name ? 1 : 0)) )
                    .map(i => '- ' + ((i.system.quantity > 1) ? i.system.quantity + ' ' : '') + i.name + (i.isMagical ? '* ' : ' ') +  i.system.weight.value).join('\n') || ''
        },

        {
            "pdf": "consumables", "foundry":
                actordata.inventory.filter(i => i.type === 'consumable')
                    .sort( (a,b) => (a.name < b.name ? -1 : (a.name > b.name ? 1 : 0)) )
                    .map(i => '- ' + ((i.system.quantity > 1) ? i.system.quantity + ' ' : '') + i.name + (i.isMagical ? '* ' : ' ') +  i.system.weight.value).join('\n') || ''
        },

        {
            "pdf": "worn_items", "foundry":
                actordata.inventory.filter(i => i.system.usage.type === 'worn' && i.type !== 'consumable')
                    .sort( (a,b) => (a.name < b.name ? -1 : (a.name > b.name ? 1 : 0)) )
                    .map(i => '- ' + ((i.system.quantity > 1) ? i.system.quantity + ' ' : '') + i.name + (i.isMagical ? '* ' : ' ') +  i.system.weight.value).join('\n') || ''
        },

        { "pdf": "bulk", "foundry": actordata.inventory.bulk.value.normal },

        { "pdf": "copper", "foundry": actordata.inventory.coins.cp || 0 },
        { "pdf": "silver", "foundry": actordata.inventory.coins.sp || 0 },
        { "pdf": "gold", "foundry": actordata.inventory.coins.gp || 0 },
        { "pdf": "platinum", "foundry": actordata.inventory.coins.pp || 0 },

        /* FIXME: Gems and Artwork */

        /* Origin and Appearance Section */
        { "pdf": "ethnicity", "foundry": actordata.system.details.ethnicity.value || '' },
        { "pdf": "nationality", "foundry": actordata.system.details.nationality.value || '' },
        { "pdf": "birthplace", "foundry": actordata.system.details.biography.birthPlace || '' },
        { "pdf": "age", "foundry": actordata.system.details.age.value || '' },
        { "pdf": "gender_pronouns", "foundry": actordata.system.details.gender.value || '' },
        { "pdf": "height", "foundry": actordata.system.details.height.value || '' },
        { "pdf": "weight", "foundry": actordata.system.details.weight.value || '' },
        { "pdf": "Appearance", "foundry": actordata.system.details.biography.appearance.replace('<p>', '').replace('</p>', '') || '' },

        /* Personality Section */
        { "pdf": "attitude", "foundry": actordata.system.details.biography.attitude || '' },
        { "pdf": "deity_philosophy", "foundry": actordata.deity?.name ?? "" },
        { "pdf": "edicts", "foundry": "" },
        /* FIXME: Add anathema */
        { "pdf": "anathema", "foundry": "" },
        { "pdf": "likes", "foundry": actordata.system.details.biography.likes || '' },
        { "pdf": "dislikes", "foundry": actordata.system.details.biography.dislikes || '' },
        { "pdf": "catchphrases", "foundry": actordata.system.details.biography.catchphrases || '' },

        /* Campaign notes Section */
        { "pdf": "campaign_notes", "foundry": actordata.system.details.biography.campaignNotes.replace('<p>', '').replace('</p>', '') || '' },
        { "pdf": "allies", "foundry": actordata.system.details.biography.allies.replace('<p>', '').replace('</p>', '') || '' },
        { "pdf": "enemies", "foundry": actordata.system.details.biography.enemies.replace('<p>', '').replace('</p>', '') || '' },
        { "pdf": "organizations", "foundry": actordata.system.details.biography.organaizations?.replace('<p>', '').replace('</p>', '') || '' },

        /* Actions and Activities Section */
        /* Dedicated loop at the end */

        /* Free Actions and Reactions Section */
        /* Dedicated loop at the end */

        /* Magical Tradition Section*/
        { "pdf": "arcane", "foundry":
            actordata.spellcasting.filter(i => i.system.tradition.value === "arcane" && ["prepared","spontaneous"].includes(i.system.prepared.value)).length || false
        },
        { "pdf": "occult", "foundry":
            actordata.spellcasting.filter(i => i.system.tradition.value === "occult" && ["prepared","spontaneous"].includes(i.system.prepared.value)).length || false
        },
        { "pdf": "primal", "foundry":
            actordata.spellcasting.filter(i => i.system.tradition.value === "primal" && ["prepared","spontaneous"].includes(i.system.prepared.value)).length || false
        },
        { "pdf": "divine", "foundry":
            actordata.spellcasting.filter(i => i.system.tradition.value === "divine" && ["prepared","spontaneous"].includes(i.system.prepared.value)).length || false
        },

        { "pdf": "prepared_caster", "foundry":
            actordata.spellcasting.filter(i => spellcasting_traditions.includes(i.system.tradition.value) && i.system.prepared.value === 'prepared').length ||  false
        },
        { "pdf": "spontaneous_caster", "foundry":
            actordata.spellcasting.filter(i => spellcasting_traditions.includes(i.system.tradition.value) && i.system.prepared.value === 'spontaneous').length ||  false
        },

        /* Spell Statistics Section */
        { "pdf": "spell_attack", "foundry":
            format_mod(
                actordata.spellcasting.filter(i => spellcasting_traditions.includes(i.system.tradition?.value) && prepared_types.includes(i.system.prepared?.value))
                .sort( (a,b) => (a.statistic.check.mod < b.statistic.check.mod ? -1 : (a.statistic.check.mod > b.statistic.check.mod ? 1 : 0)) ).reverse()
                .map(i => i.statistic.mod)[0]
            ) || ""
        },

        { "pdf": "spell_attribute_modifier", "foundry":
            actordata.spellcasting.filter(i => spellcasting_traditions.includes(i.system.tradition?.value) && prepared_types.includes(i.system.prepared?.value))
                .sort( (a,b) => (a.statistic.check.mod < b.statistic.check.mod ? -1 : (a.statistic.check.mod > b.statistic.check.mod ? 1 : 0)) ).reverse()
                .map(i => i.statistic.attributeModifier.value)[0] || ""
        },

        { "pdf": "spell_proficiency_modifier", "foundry":
            actordata.spellcasting.filter(i => spellcasting_traditions.includes(i.system.tradition?.value) && prepared_types.includes(i.system.prepared?.value))
                .sort( (a,b) => (a.statistic.check.mod < b.statistic.check.mod ? -1 : (a.statistic.check.mod > b.statistic.check.mod ? 1 : 0)) ).reverse()[0]
                .statistic.modifiers.filter(i => i.type === "proficiency")
                .map(i => i.modifier)[0] || ""
        },

        { "pdf": "attack_spell_trained", "foundry":
            actordata.spellcasting.filter(i => spellcasting_traditions.includes(i.system.tradition?.value) && prepared_types.includes(i.system.prepared?.value))
                .sort( (a,b) => (a.statistic.check.mod < b.statistic.check.mod ? -1 : (a.statistic.check.mod > b.statistic.check.mod ? 1 : 0)) ).reverse()
                .map(i => i.system.proficiency.value)[0] >= 1 || false
        },
        { "pdf": "attack_spell_expert", "foundry":
            actordata.spellcasting.filter(i => spellcasting_traditions.includes(i.system.tradition?.value) && prepared_types.includes(i.system.prepared?.value))
                .sort( (a,b) => (a.statistic.check.mod < b.statistic.check.mod ? -1 : (a.statistic.check.mod > b.statistic.check.mod ? 1 : 0)) ).reverse()
                .map(i => i.system.proficiency.value)[0] >= 2 || false
        },
        { "pdf": "attack_spell_master", "foundry":
            actordata.spellcasting.filter(i => spellcasting_traditions.includes(i.system.tradition?.value) && prepared_types.includes(i.system.prepared?.value))
            .sort( (a,b) => (a.statistic.check.mod < b.statistic.check.mod ? -1 : (a.statistic.check.mod > b.statistic.check.mod ? 1 : 0)) ).reverse()
            .map(i => i.system.proficiency.value)[0] >= 3 || false
        },
        { "pdf": "attack_spell_legendary", "foundry":
            actordata.spellcasting.filter(i => spellcasting_traditions.includes(i.system.tradition?.value) && prepared_types.includes(i.system.prepared?.value))
                .sort( (a,b) => (a.statistic.check.mod < b.statistic.check.mod ? -1 : (a.statistic.check.mod > b.statistic.check.mod ? 1 : 0)) ).reverse()
                .map(i => i.system.proficiency.value)[0] >= 4 || false
        },
        { "pdf": "spell_dc", "foundry":
            actordata.spellcasting.filter(i => spellcasting_traditions.includes(i.system.tradition?.value) && prepared_types.includes(i.system.prepared?.value))
                .sort( (a,b) => (a.statistic.check.mod < b.statistic.check.mod ? -1 : (a.statistic.check.mod > b.statistic.check.mod ? 1 : 0)) ).reverse()
                .map(i => i.statistic.check.mod)[0] +10 || 0
        },
        { "pdf": "spell_dc_attribute_modifier", "foundry":
            actordata.spellcasting.filter(i => spellcasting_traditions.includes(i.system.tradition?.value) && prepared_types.includes(i.system.prepared?.value))
                .sort( (a,b) => (a.statistic.check.mod < b.statistic.check.mod ? -1 : (a.statistic.check.mod > b.statistic.check.mod ? 1 : 0)) ).reverse()
                .map(i => i.statistic.attributeModifier.value)[0] || ""
        },
        { "pdf": "spell_dc_proficiency_modifier", "foundry":
            actordata.spellcasting.filter(i => spellcasting_traditions.includes(i.system.tradition?.value) && prepared_types.includes(i.system.prepared?.value))
                .sort( (a,b) => (a.statistic.check.mod < b.statistic.check.mod ? -1 : (a.statistic.check.mod > b.statistic.check.mod ? 1 : 0)) ).reverse()[0]
                .statistic.modifiers.filter(i => i.type === "proficiency")
                .map(i => i.modifier)[0] || ""
        },

        { "pdf": "spell_dc_trained", "foundry":
            actordata.spellcasting.filter(i => spellcasting_traditions.includes(i.system.tradition?.value) && prepared_types.includes(i.system.prepared?.value))
                .sort( (a,b) => (a.statistic.check.mod < b.statistic.check.mod ? -1 : (a.statistic.check.mod > b.statistic.check.mod ? 1 : 0)) ).reverse()
                .map(i => i.system.proficiency.value)[0] >= 1 || false
        },
        { "pdf": "spell_dc_expert", "foundry":
            actordata.spellcasting.filter(i => spellcasting_traditions.includes(i.system.tradition?.value) && prepared_types.includes(i.system.prepared?.value))
                .sort( (a,b) => (a.statistic.check.mod < b.statistic.check.mod ? -1 : (a.statistic.check.mod > b.statistic.check.mod ? 1 : 0)) ).reverse()
                .map(i => i.system.proficiency.value)[0] >= 2 || false
        },
        { "pdf": "spell_dc_master", "foundry":
            actordata.spellcasting.filter(i => spellcasting_traditions.includes(i.system.tradition?.value) && prepared_types.includes(i.system.prepared?.value))
            .sort( (a,b) => (a.statistic.check.mod < b.statistic.check.mod ? -1 : (a.statistic.check.mod > b.statistic.check.mod ? 1 : 0)) ).reverse()
            .map(i => i.system.proficiency.value)[0] >= 3 || false
        },
        { "pdf": "spell_dc_legendary", "foundry":
            actordata.spellcasting.filter(i => spellcasting_traditions.includes(i.system.tradition?.value) && prepared_types.includes(i.system.prepared?.value))
                .sort( (a,b) => (a.statistic.check.mod < b.statistic.check.mod ? -1 : (a.statistic.check.mod > b.statistic.check.mod ? 1 : 0)) ).reverse()
                .map(i => i.system.proficiency.value)[0] >= 4 || false
        },

        /* Cantrips Section */
        { "pdf": "cantrip_slots", "foundry":
            actordata.spellcasting.filter(i => spellcasting_traditions.includes(i.system.tradition?.value) && prepared_types.includes(i.system.prepared?.value))
                .sort( (a,b) => (a.statistic.check.mod < b.statistic.check.mod ? -1 : (a.statistic.check.mod > b.statistic.check.mod ? 1 : 0)) ).reverse()
                .map(i => i.spells.entry.system.slots.slot0.max)[0] || "0"
        },
        { "pdf": "cantrip_rank", "foundry": actordata.items.filter(i => i.type === 'spell' && i.isCantrip)[0] ? Math.round(actordata.system.details.level.value / 2) : '' },

        { "pdf": "list_cantrips", "foundry":
            actordata.items.filter(i => i.type === 'spell' && i.system.category.value === 'spell' && i.isCantrip)
                .sort((a,b) => (a.name < b.name ? -1 : (a.name > b.name ? 1 : 0)))
                .map(i => '- ' + i.name).join('\n')
        },

        /* Focus Spells Section */
        { "pdf": "focus_point_1", "foundry": actordata.system.resources.focus.max >= 1 || false },
        { "pdf": "focus_point_2", "foundry": actordata.system.resources.focus.max >= 2 || false },
        { "pdf": "focus_point_3", "foundry": actordata.system.resources.focus.max >= 3 || false },
        { "pdf": "focus_spell_rank", "foundry": actordata.items.filter(i => i.type === 'spell' && i.system.category.value === 'focus')[0] ? Math.round(actordata.system.details.level.value / 2) : '' },
        { "pdf": "list_focus_spells", "foundry":
            actordata.items.filter(i => i.type === 'spell' && i.system.category.value === 'focus')
                .sort((a,b) => (a.name < b.name ? -1 : (a.name > b.name ? 1 : 0)))
                .map(i => '- ' + i.name).join('\n')
        },

        /* Innate Spell Section */
        /* FIXME: include innate spells */
        { "pdf": "list_innate_spells", "foundry": "" },

        /* Spell Slots Section */
        { "pdf": "spell1_slots", "foundry":
            actordata.spellcasting.filter(i => spellcasting_traditions.includes(i.system.tradition?.value) && prepared_types.includes(i.system.prepared?.value))
                .sort( (a,b) => (a.statistic.check.mod < b.statistic.check.mod ? -1 : (a.statistic.check.mod > b.statistic.check.mod ? 1 : 0)) ).reverse()
                .map(i => i.spells.entry.system.slots.slot1.max)[0] || ""
        },
        { "pdf": "spell2_slots", "foundry":
            actordata.spellcasting.filter(i => spellcasting_traditions.includes(i.system.tradition?.value) && prepared_types.includes(i.system.prepared?.value))
                .sort( (a,b) => (a.statistic.check.mod < b.statistic.check.mod ? -1 : (a.statistic.check.mod > b.statistic.check.mod ? 1 : 0)) ).reverse()
                .map(i => i.spells.entry.system.slots.slot2.max)[0] || ""
        },
        { "pdf": "spell3_slots", "foundry":
            actordata.spellcasting.filter(i => spellcasting_traditions.includes(i.system.tradition?.value) && prepared_types.includes(i.system.prepared?.value))
                .sort( (a,b) => (a.statistic.check.mod < b.statistic.check.mod ? -1 : (a.statistic.check.mod > b.statistic.check.mod ? 1 : 0)) ).reverse()
                .map(i => i.spells.entry.system.slots.slot3.max)[0] || ""

        },
        { "pdf": "spell4_slots", "foundry":
            actordata.spellcasting.filter(i => spellcasting_traditions.includes(i.system.tradition?.value) && prepared_types.includes(i.system.prepared?.value))
                .sort( (a,b) => (a.statistic.check.mod < b.statistic.check.mod ? -1 : (a.statistic.check.mod > b.statistic.check.mod ? 1 : 0)) ).reverse()
                .map(i => i.spells.entry.system.slots.slot4.max)[0] || ""

        },
        { "pdf": "spell5_slots", "foundry":
            actordata.spellcasting.filter(i => spellcasting_traditions.includes(i.system.tradition?.value) && prepared_types.includes(i.system.prepared?.value))
                .sort( (a,b) => (a.statistic.check.mod < b.statistic.check.mod ? -1 : (a.statistic.check.mod > b.statistic.check.mod ? 1 : 0)) ).reverse()
                .map(i => i.spells.entry.system.slots.slot5.max)[0] || ""

        },
        { "pdf": "spell6_slots", "foundry":
            actordata.spellcasting.filter(i => spellcasting_traditions.includes(i.system.tradition?.value) && prepared_types.includes(i.system.prepared?.value))
                .sort( (a,b) => (a.statistic.check.mod < b.statistic.check.mod ? -1 : (a.statistic.check.mod > b.statistic.check.mod ? 1 : 0)) ).reverse()
                .map(i => i.spells.entry.system.slots.slot6.max)[0] || ""

        },
        { "pdf": "spell7_slots", "foundry":
            actordata.spellcasting.filter(i => spellcasting_traditions.includes(i.system.tradition?.value) && prepared_types.includes(i.system.prepared?.value))
                .sort( (a,b) => (a.statistic.check.mod < b.statistic.check.mod ? -1 : (a.statistic.check.mod > b.statistic.check.mod ? 1 : 0)) ).reverse()
                .map(i => i.spells.entry.system.slots.slot7.max)[0] || ""

        },
        { "pdf": "spell8_slots", "foundry":
            actordata.spellcasting.filter(i => spellcasting_traditions.includes(i.system.tradition?.value) && prepared_types.includes(i.system.prepared?.value))
                .sort( (a,b) => (a.statistic.check.mod < b.statistic.check.mod ? -1 : (a.statistic.check.mod > b.statistic.check.mod ? 1 : 0)) ).reverse()
                .map(i => i.spells.entry.system.slots.slot8.max)[0] || ""
        },
        { "pdf": "spell9_slots", "foundry":
            actordata.spellcasting.filter(i => spellcasting_traditions.includes(i.system.tradition?.value) && prepared_types.includes(i.system.prepared?.value))
                .sort( (a,b) => (a.statistic.check.mod < b.statistic.check.mod ? -1 : (a.statistic.check.mod > b.statistic.check.mod ? 1 : 0)) ).reverse()
                .map(i => i.spells.entry.system.slots.slot9.max)[0] || ""
        },
        { "pdf": "spell10_slots", "foundry":
            actordata.spellcasting.filter(i => spellcasting_traditions.includes(i.system.tradition?.value) && prepared_types.includes(i.system.prepared?.value))
                .sort( (a,b) => (a.statistic.check.mod < b.statistic.check.mod ? -1 : (a.statistic.check.mod > b.statistic.check.mod ? 1 : 0)) ).reverse()
                .map(i => i.spells.entry.system.slots.slot10.max)[0] || ""

        },

        { "pdf": "list_spells1", "foundry":
            [].concat(
            (actordata.items.filter(i => i.type === 'spell' && i.system.category.value === 'spell' && !i.isCantrip && i.system.level.value === 1).length >= 1 ? ['Level 1 Spells:'] : []),
            actordata.items.filter(i => i.type === 'spell' && i.system.category.value === 'spell' && !i.isCantrip && i.system.level.value === 1)
                .sort((a,b) => (a.name < b.name ? -1 : (a.name > b.name ? 1 : 0)))
                .map(i => '- ' + i.name),

            (actordata.items.filter(i => i.type === 'spell' && i.system.category.value === 'spell' && !i.isCantrip && i.system.level.value === 2).length >= 1 ? ['', 'Level 2 Spells:'] : []),
            actordata.items.filter(i => i.type === 'spell' && i.system.category.value === 'spell' && !i.isCantrip && i.system.level.value === 2)
                .sort((a,b) => (a.name < b.name ? -1 : (a.name > b.name ? 1 : 0)))
                .map(i => '- ' + i.name),

            (actordata.items.filter(i => i.type === 'spell' && i.system.category.value === 'spell' && !i.isCantrip && i.system.level.value === 3).length >= 1 ? ['', 'Level 3 Spells:'] : []),
            actordata.items.filter(i => i.type === 'spell' && i.system.category.value === 'spell' && !i.isCantrip && i.system.level.value === 3)
                .sort((a,b) => (a.name < b.name ? -1 : (a.name > b.name ? 1 : 0)))
                .map(i => '- ' + i.name),

            (actordata.items.filter(i => i.type === 'spell' && i.system.category.value === 'spell' && !i.isCantrip && i.system.level.value === 4).length >= 1 ? ['', 'Level 4 Spells:'] : []),
            actordata.items.filter(i => i.type === 'spell' && i.system.category.value === 'spell' && !i.isCantrip && i.system.level.value === 4)
                .sort((a,b) => (a.name < b.name ? -1 : (a.name > b.name ? 1 : 0)))
                .map(i => '- ' + i.name),

        ).join('\n')

        },
        { "pdf": "list_spells2", "foundry":
            [].concat(
            (actordata.items.filter(i => i.type === 'spell' && i.system.category.value === 'spell' && !i.isCantrip && i.system.level.value === 5).length >= 1 ? ['Level 5 Spells:'] : []),
            actordata.items.filter(i => i.type === 'spell' && i.system.category.value === 'spell' && !i.isCantrip && i.system.level.value === 5)
                .sort((a,b) => (a.name < b.name ? -1 : (a.name > b.name ? 1 : 0)))
                .map(i => '- ' + i.name),

            (actordata.items.filter(i => i.type === 'spell' && i.system.category.value === 'spell' && !i.isCantrip && i.system.level.value === 6).length >= 1 ? ['', 'Level 6 Spells:'] : []),
            actordata.items.filter(i => i.type === 'spell' && i.system.category.value === 'spell' && !i.isCantrip && i.system.level.value === 6)
                .sort((a,b) => (a.name < b.name ? -1 : (a.name > b.name ? 1 : 0)))
                .map(i => '- ' + i.name),

            (actordata.items.filter(i => i.type === 'spell' && i.system.category.value === 'spell' && !i.isCantrip && i.system.level.value === 7).length >= 1 ? ['', 'Level 7 Spells:'] : []),
            actordata.items.filter(i => i.type === 'spell' && i.system.category.value === 'spell' && !i.isCantrip && i.system.level.value === 7)
                .sort((a,b) => (a.name < b.name ? -1 : (a.name > b.name ? 1 : 0)))
                .map(i => '- ' + i.name),

            (actordata.items.filter(i => i.type === 'spell' && i.system.category.value === 'spell' && !i.isCantrip && i.system.level.value === 8).length >= 1 ? ['', 'Level 8 Spells:'] : []),
            actordata.items.filter(i => i.type === 'spell' && i.system.category.value === 'spell' && !i.isCantrip && i.system.level.value === 8)
                .sort((a,b) => (a.name < b.name ? -1 : (a.name > b.name ? 1 : 0)))
                .map(i => '- ' + i.name),

                (actordata.items.filter(i => i.type === 'spell' && i.system.category.value === 'spell' && !i.isCantrip && i.system.level.value === 9).length >= 1 ? ['', 'Level 9 Spells:'] : []),
                actordata.items.filter(i => i.type === 'spell' && i.system.category.value === 'spell' && !i.isCantrip && i.system.level.value === 9)
                    .sort((a,b) => (a.name < b.name ? -1 : (a.name > b.name ? 1 : 0)))
                    .map(i => '- ' + i.name),

            (actordata.items.filter(i => i.type === 'spell' && i.system.category.value === 'spell' && !i.isCantrip && i.system.level.value === 10).length >= 1 ? ['', 'Level 10 Spells:'] : []),
            actordata.items.filter(i => i.type === 'spell' && i.system.category.value === 'spell' && !i.isCantrip && i.system.level.value === 10)
                .sort((a,b) => (a.name < b.name ? -1 : (a.name > b.name ? 1 : 0)))
                .map(i => '- ' + i.name),

            ).join('\n')
        },
        /* Rituals sections */
        /* FIXME: fix rituals */
        { "pdf": "list_rituals1", "foundry": "" },
        { "pdf": "list_rituals2", "foundry": "" },
    ];
    /* Skills */

    Object.values(actordata.skills).filter(i => !i.lore).forEach(
        (skill) => {
            ret = ret.concat(
                [
                    { "pdf": `${skill.slug}`, "foundry": format_mod(skill.mod) },
                    { "pdf": `${skill.slug}_attribute_modifier`, "foundry": skill.attributeModifier.modifier || '0' },
                    { "pdf": `${skill.slug}_proficiency_modifier`, "foundry": skill.modifiers.filter(i => i.type == 'proficiency').map(i => i.modifier)[0] || '0' },
                    { "pdf": `${skill.slug}_item_modifier`, "foundry": skill.modifiers.filter(i => i.type === 'item' && i.enabled && i.slug !== 'armor-check-penalty').map(i => ([i.modifier].reduce((partialSum, a) => partialSum + a, 0) < 0 ? [i.modifier].reduce((partialSum, a) => partialSum + a, 0) : '+' + [i.modifier].reduce((partialSum, a) => partialSum + a, 0)))[0] || '0' },
                    { "pdf": `${skill.slug}_armor_modifier`, "foundry": skill.modifiers.filter(i => i.slug === 'armor-check-penalty' ).map(i => i.modifier)[0] || '0' },
                    { "pdf": `${skill.slug}_trained`, "foundry": skill.rank >= 1 || false },
                    { "pdf": `${skill.slug}_expert`, "foundry": skill.rank >= 2 || false },
                    { "pdf": `${skill.slug}_master`, "foundry": skill.rank >= 3 || false },
                    { "pdf": `${skill.slug}_legendary`, "foundry": skill.rank >= 4 || false },
                ]
            )
        }
    );

    /* Lore Skills */
    let lore_count = 0;
    Object.values(actordata.skills).filter(i => i.lore).forEach(
        (skill) => {
            ret = ret.concat(
                [
                    { "pdf": `lore${lore_count+1}`, "foundry": format_mod(skill.mod) },
                    { "pdf": `lore${lore_count+1}_subcategory`, "foundry": skill.label },
                    { "pdf": `lore${lore_count+1}_attribute_modifier`, "foundry": skill.attributeModifier.modifier || '0' },
                    { "pdf": `lore${lore_count+1}_proficiency_modifier`, "foundry": skill.modifiers.filter(i => i.type == 'proficiency').map(i => i.modifier)[0] || '0' },
                    { "pdf": `lore${lore_count+1}_item_modifier`, "foundry": skill.modifiers.filter(i => i.type === 'item' && i.enabled && i.slug !== 'armor-check-penalty').map(i => ([i.modifier].reduce((partialSum, a) => partialSum + a, 0) < 0 ? [i.modifier].reduce((partialSum, a) => partialSum + a, 0) : '+' + [i.modifier].reduce((partialSum, a) => partialSum + a, 0)))[0] || '0' },
                    { "pdf": `lore${lore_count+1}_armor_modifier`, "foundry": skill.modifiers.filter(i => i.slug === 'armor-check-penalty' ).map(i => i.modifier)[0] || '0' },
                    { "pdf": `lore${lore_count+1}_trained`, "foundry": skill.rank >= 1 || false },
                    { "pdf": `lore${lore_count+1}_expert`, "foundry": skill.rank >= 2 || false },
                    { "pdf": `lore${lore_count+1}_master`, "foundry": skill.rank >= 3 || false },
                    { "pdf": `lore${lore_count+1}_legendary`, "foundry": skill.rank >= 4 || false },
                ]
            );
            lore_count = lore_count;
        }
    );

    /* Strikes */
    /* Melee strikes range from 0-2 */
    let attack_descriptions = [ 'PF2E.Strike.Melee.Description', 'PF2E.Strike.Unarmed.Description'];
    let melee_attack_count = 0;
    actordata.system.actions.filter(i => attack_descriptions.includes(i.description)).sort( (a,b) => (a.label < b.label ? -1 : (a.label > b.label ? 1 : 0)) ).forEach(
        (attack) => {
            let damage = `${attack.item.system.damage.dice}${attack.item.system.damage.die}`;
            let modifier = parseInt(attack.modifiers.filter(i => i.type === "ability").map(i => i.modifier)[0]) || 0;
            if (modifier != 0) {
                damage = damage + format_mod(modifier);
            };
            ret = ret.concat(
                    [
                        { "pdf": `melee${melee_attack_count+1}_name`, "foundry": attack.label},
                        { "pdf": `melee${melee_attack_count+1}_attack`, "foundry": format_mod(attack.totalModifier)},
                        { "pdf": `melee${melee_attack_count+1}_attribute_modifier`, "foundry": attack.modifiers.filter(i => i.type === 'ability' && i.enabled).map(i => i.modifier)[0] || 0 },
                        { "pdf": `melee${melee_attack_count+1}_proficiency_modifier`, "foundry": attack.modifiers.filter(i => i.type === 'proficiency').map(i => i.modifier)[0] || 0},
                        { "pdf": `melee${melee_attack_count+1}_item_modifier`, "foundry": attack.modifiers.filter(i => i.type === 'item' && i.enabled).map(i => i.modifier)[0] || 0},
                        { "pdf": `melee${melee_attack_count+1}_damage`, "foundry": damage },
                        { "pdf": `melee${melee_attack_count+1}_bludgeoning_damage`, "foundry": attack.item.system.damage.damageType === "bludgeoning" || false },
                        { "pdf": `melee${melee_attack_count+1}_piercing_damage`, "foundry": attack.item.system.damage.damageType === "piercing" || false },
                        { "pdf": `melee${melee_attack_count+1}_slashing_damage`, "foundry": attack.item.system.damage.damageType === "slashing" || attack.item.system.traits.value.includes('versatile-s') || false },
                        { "pdf": `melee${melee_attack_count+1}_traits_notes`, "foundry": attack.item.system.traits.value.join(", ") },
                    ]
                );
            melee_attack_count = melee_attack_count +1;
        }
    );
    /* Ranged strikes range from 0-1 */
    let ranged_attack_count = 0;
    actordata.system.actions.filter(i => i.description === "PF2E.Strike.Ranged.Description" ).sort( (a,b) => (a.label < b.label ? -1 : (a.label > b.label ? 1 : 0)) ).forEach(
        (attack) => {
            ret = ret.concat(
                [
                    { "pdf": `ranged${ranged_attack_count+1}_name`, "foundry": attack.label},
                    { "pdf": `ranged${ranged_attack_count+1}_attack`, "foundry": format_mod(attack.totalModifier)},
                    { "pdf": `ranged${ranged_attack_count+1}_attribute_modifier`, "foundry": attack.modifiers.filter(i => i.type === 'ability' && i.enabled).map(i => i.modifier)[0] || 0 },
                    { "pdf": `ranged${ranged_attack_count+1}_proficiency_modifier`, "foundry": attack.modifiers.filter(i => i.type === 'proficiency').map(i => i.modifier)[0] || 0},
                    { "pdf": `ranged${ranged_attack_count+1}_item_modifier`, "foundry": attack.modifiers.filter(i => i.type === 'item' && i.enabled).map(i => i.modifier)[0] || 0},
                    { "pdf": `ranged${ranged_attack_count+1}_damage`, "foundry": `${attack.item.system.damage.dice}${attack.item.system.damage.die}` || "-" },
                    { "pdf": `ranged${ranged_attack_count+1}_bludgeoning_damage`, "foundry": attack.item.system.damage.damageType === "bludgeoning" || false },
                    { "pdf": `ranged${ranged_attack_count+1}_piercing_damage`, "foundry": attack.item.system.damage.damageType === "piercing" || false },
                    { "pdf": `ranged${ranged_attack_count+1}_slashing_damage`, "foundry": attack.item.system.damage.damageType === "slashing" || attack.item.system.traits.value.includes('versatile-s') || false },
                    { "pdf": `ranged${ranged_attack_count+1}_traits_notes`, "foundry": attack.item.system.traits.value.join(", ") },
                ]
            );
            ranged_attack_count = ranged_attack_count +1;
        }
    );
    /* Actions and Activities */
    /* ranges from 0-8 in PDF*/
    let action_count = 0;
    actordata.items.filter(i => i.system.actionType?.value == "action").sort((a,b) => (a.name < b.name ? -1 : (a.name > b.name ? 1 : 0))).forEach(
        (action) => {
            if (action_count < 9) {
                ret = ret.concat(
                    [
                        {"pdf": `activity${action_count+1}_name`, "foundry": action.name },
                        {"pdf": `activity${action_count+1}_action_count`, "foundry": ['','á','â','ã'][action.system.actions.value] },
                        {"pdf": `activity${action_count+1}_traits`, "foundry": [action.system.traits.rarity].concat(action.system.traits.value).join(", ") },
                        {"pdf": `activity${action_count+1}_frequency`, "foundry": (action.frequency?.max + "/" + action.frequency?.per) || "" },
                        {"pdf": `activity${action_count+1}_reference`, "foundry": action.system.publication?.title || action.system.source?.value || "" },
                    ]
                );
            };
            action_count = action_count +1;
        }
    );
    /* Reactions and Free actions */
    /* ranges from 9-16 in PDF*/
    let reaction_count = 0;
    actordata.items.filter(i => i.system.actionType?.value == "reaction" || i.system.actionType?.value == "free")
        .sort((a,b) => (a.name < b.name ? -1 : (a.name > b.name ? 1 : 0))).reverse()
        .sort((a,b) => (a.system.actionType.value < b.system.actionType.value ? -1 : (a.system.actionType.value > b.system.actionType.value ? 1 : 0))).reverse().forEach(
        (action) => {
            if (reaction_count < 9) {
                ret = ret.concat(
                    [
                        {"pdf": `activity${reaction_count+9}_name`, "foundry": action.name },
                        {"pdf": `activity${reaction_count+9}_action_count`, "foundry": (action.system.actionType.value === "reaction") ? 'ä' : 'à' || "" },
                        {"pdf": `activity${reaction_count+9}_traits`, "foundry": [action.system.traits.rarity].concat(action.system.traits.value).join(", ") },
                        {"pdf": `activity${reaction_count+9}_frequency`, "foundry": (action.frequency?.max + "/" + action.frequency?.per) || "" },
                        {"pdf": `activity${reaction_count+9}_reference`, "foundry": action.system.publication?.title || action.system.source?.value || "" },
                    ]
                );
            };
            reaction_count = reaction_count +1;
        }
    );
    return ret;
}()