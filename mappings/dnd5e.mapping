/* PDF: https://media.wizards.com/2016/dnd/downloads/5E_CharacterSheet_Fillable.pdf */
/* This is a WIP and is not finished. Contributions are greatly appreciated :) */

[
    /* Page #1 */
    { "pdf": "ClassLevel", "foundry": @items.filter(i => i.type === 'class').map(i => `${i.name} ${i.data.data.levels}`).join(' / ') },
    { "pdf": "Background", "foundry": @data.details.background },
    { "pdf": "PlayerName", "foundry": Object.entries(@permission).filter(entry => entry[1] === 3).map(entry => entry[0]).map(id => !game.users.get(id)?.isGM ? game.users.get(id)?.name : null).filter(x => x).join(", ") },
    { "pdf": "CharacterName", "foundry": @name },
    { "pdf": "Race", "foundry": @data.details.race },
    { "pdf": "Alignment", "foundry": @data.details.alignment },
    { "pdf": "XP", "foundry": @data.details.xp.value },
    { "pdf": "Inspiration", "foundry": @data.attributes.inspiration ? "x" : "" },
    { "pdf": "STR", "foundry": @data.abilities.str.value },
    { "pdf": "ProfBonus", "foundry": @data.attributes.prof },
    { "pdf": "AC", "foundry": @data.attributes.ac.value },
    { "pdf": "Initiative", "foundry": @data.attributes.init.total },
    { "pdf": "Speed", "foundry": Object.entries(@data.attributes.movement).filter(val => val[1]).map(val => val[0] === "hover" ? Object.entries(@data.attributes.movement)[6][0] : "" + val[0] !== "units" && val[0] !== "hover" ? val.join(": ") + Object.entries(@data.attributes.movement)[5][1] : "").filter(String).join(", ") },
    { "pdf": "PersonalityTraits", "foundry": @data.details.trait },
    { "pdf": "STRmod", "foundry": @data.abilities.str.mod },
    { "pdf": "ST Strength", "foundry": @data.abilities.str.save },
    { "pdf": "DEX", "foundry": @data.abilities.dex.value },
    { "pdf": "Ideals", "foundry": @data.details.ideal },
    { "pdf": "DEXmod", "foundry": @data.abilities.dex.mod },
    { "pdf": "Bonds", "foundry": @data.details.bond },
    { "pdf": "CON", "foundry": @data.abilities.con.value },
    { "pdf": "HDTotal", "foundry": @data.attributes.hd },
    { "pdf": "Check Box 12", "foundry": @data.attributes.death.success },
    { "pdf": "Check Box 13", "foundry": @data.attributes.death.success },
    { "pdf": "Check Box 14", "foundry": @data.attributes.death.success },
    { "pdf": "CONmod", "foundry": @data.abilities.con.mod },
    { "pdf": "Check Box 15", "foundry": @data.attributes.death.failure },
    { "pdf": "Check Box 16", "foundry": @data.attributes.death.failure },
    { "pdf": "Check Box 17", "foundry": @data.attributes.death.failure },
    { "pdf": "HD", "foundry": @data.attributes.hd },
    { "pdf": "Flaws", "foundry": @data.details.flaw },
    { "pdf": "INT", "foundry": @data.abilities.int.value },
    { "pdf": "ST Dexterity", "foundry": @data.abilities.dex.save },
    { "pdf": "ST Constitution", "foundry": @data.abilities.con.save },
    { "pdf": "ST Intelligence", "foundry": @data.abilities.int.save },
    { "pdf": "ST Wisdom", "foundry": @data.abilities.wis.save },
    { "pdf": "ST Charisma", "foundry": @data.abilities.cha.save },
    { "pdf": "Acrobatics", "foundry": @data.skills.acr.total },
    { "pdf": "Animal", "foundry": @data.skills.ani.total },
    { "pdf": "Athletics", "foundry": @data.skills.ath.total },
    { "pdf": "Deception", "foundry": @data.skills.dec.total },
    { "pdf": "History", "foundry": @data.skills.his.total },
    { "pdf": "Wpn Name", "foundry": @items.filter(i => i.type === 'weapon' && i.data.data.equipped && i.hasAttack && i.hasDamage)[0]?.name || "" },
    { "pdf": "Wpn1 AtkBonus", "foundry": "" },
    { "pdf": "Wpn1 Damage", "foundry": @items.filter(i => i.type === 'weapon' && i.data.data.equipped && i.hasAttack && i.hasDamage)[0]?.data?.data?.damage?.parts[0][0] || "" },
    { "pdf": "Insight", "foundry": @data.skills.ins.total },
    { "pdf": "Intimidation", "foundry": @data.skills.itm.total },
    { "pdf": "Wpn Name 2", "foundry": @items.filter(i => i.type === 'weapon' && i.data.data.equipped && i.hasAttack && i.hasDamage)[1]?.name || "" },
    { "pdf": "Wpn2 AtkBonus", "foundry": "" },
    { "pdf": "Wpn Name 3", "foundry": @items.filter(i => i.type === 'weapon' && i.data.data.equipped && i.hasAttack && i.hasDamage)[2]?.name || "" },
    { "pdf": "Wpn3 AtkBonus", "foundry": "" },
    { "pdf": "Check Box 11", "foundry": @data.abilities.str.proficient },
    { "pdf": "Check Box 18", "foundry": @data.abilities.dex.proficient },
    { "pdf": "Check Box 19", "foundry": @data.abilities.con.proficient },
    { "pdf": "Check Box 20", "foundry": @data.abilities.int.proficient },
    { "pdf": "Check Box 21", "foundry": @data.abilities.wis.proficient },
    { "pdf": "Check Box 22", "foundry": @data.abilities.cha.proficient },
    { "pdf": "INTmod", "foundry": @data.abilities.int.mod },
    { "pdf": "Wpn2 Damage", "foundry": @items.filter(i => i.type === 'weapon' && i.data.data.equipped && i.hasAttack && i.hasDamage)[1]?.data?.data?.damage?.parts[0][0] || "" },
    { "pdf": "Investigation", "foundry": @data.skills.inv.total },
    { "pdf": "WIS", "foundry": @data.abilities.wis.value },
    { "pdf": "Arcana", "foundry": @data.skills.arc.total },
    { "pdf": "Perception", "foundry": @data.skills.prc.total },
    { "pdf": "WISmod", "foundry": @data.abilities.wis.mod },
    { "pdf": "CHA", "foundry": @data.abilities.cha.value },
    { "pdf": "Nature", "foundry": @data.skills.nat.total },
    { "pdf": "Performance", "foundry": @data.skills.per.total },
    { "pdf": "Medicine", "foundry": @data.skills.med.total },
    { "pdf": "Religion", "foundry": @data.skills.rel.total },
    { "pdf": "Stealth", "foundry": @data.skills.ste.total },
    { "pdf": "Check Box 23", "foundry": @data.skills.acr.value },
    { "pdf": "Check Box 24", "foundry": @data.skills.ani.value },
    { "pdf": "Check Box 25", "foundry": @data.skills.arc.value },
    { "pdf": "Check Box 26", "foundry": @data.skills.ath.value },
    { "pdf": "Check Box 27", "foundry": @data.skills.dec.value },
    { "pdf": "Check Box 28", "foundry": @data.skills.his.value },
    { "pdf": "Check Box 29", "foundry": @data.skills.ins.value },
    { "pdf": "Check Box 30", "foundry": @data.skills.itm.value },
    { "pdf": "Check Box 31", "foundry": @data.skills.inv.value },
    { "pdf": "Check Box 32", "foundry": @data.skills.med.value },
    { "pdf": "Check Box 33", "foundry": @data.skills.nat.value },
    { "pdf": "Check Box 34", "foundry": @data.skills.prc.value },
    { "pdf": "Check Box 35", "foundry": @data.skills.prf.value },
    { "pdf": "Check Box 36", "foundry": @data.skills.per.value },
    { "pdf": "Check Box 37", "foundry": @data.skills.rel.value },
    { "pdf": "Check Box 38", "foundry": @data.skills.slt.value },
    { "pdf": "Check Box 39", "foundry": @data.skills.ste.value },
    { "pdf": "Check Box 40", "foundry": @data.skills.sur.value },
    { "pdf": "Persuasion", "foundry": @data.skills.per.total },
    { "pdf": "HPMax", "foundry": @data.attributes.hp.max },
    { "pdf": "HPCurrent", "foundry": @data.attributes.hp.value },
    { "pdf": "HPTemp", "foundry": @data.attributes.hp.temp },
    { "pdf": "Wpn3 Damage", "foundry": @items.filter(i => i.type === 'weapon' && i.data.data.equipped && i.hasAttack && i.hasDamage)[2]?.data?.data?.damage?.parts[0][0] || "" },
    { "pdf": "SleightofHand", "foundry": @data.skills.slt.total },
    { "pdf": "CHamod", "foundry": @data.abilities.cha.mod },
    { "pdf": "Survival", "foundry": @data.skills.sur.total },
    { "pdf": "AttacksSpellcasting", "foundry": "" },
    { "pdf": "Passive", "foundry": @data.skills.prc.passive },
    { "pdf": "CP", "foundry": @data.currency.cp },
    { "pdf": "ProficienciesLang", "foundry":
        [
            actor.data.data.traits.languages.value.filter(String).map(l => l.capitalize()).join(", "),
            actor.data.data.traits.languages.custom,
            actor.data.data.traits.weaponProf.value.filter(String).map(l => l.capitalize()).join(", "),
            actor.data.data.traits.weaponProf.custom,
            actor.data.data.traits.toolProf.value.filter(String).map(l => l.capitalize()).join(", "),
            actor.data.data.traits.toolProf.custom,
            actor.data.data.traits.armorProf.value.filter(String).map(l => l.capitalize()).join(", "),
            actor.data.data.traits.armorProf.custom,
        ].filter(String).join(", ")
    },
    { "pdf": "SP", "foundry": @data.currency.sp || "" },
    { "pdf": "EP", "foundry": @data.currency.ep || "" },
    { "pdf": "GP", "foundry": @data.currency.gp || "" },
    { "pdf": "PP", "foundry": @data.currency.pp || "" },
    { "pdf": "Equipment", "foundry": @items.filter(i => !['feat', 'class', 'weapon', 'loot'].includes(i.type)).map(i => `${i.name} (${i.data.data.quantity})`).join(', ') },
    { "pdf": "Features and Traits", "foundry": @items.filter(i => ['feat', 'trait'].includes(i.type)).slice(0, 16).map(i => `${i.name} - ${i.data.data.source}`).join('\n') },

    /* Page #2 */

    { "pdf": "CharacterName 2", "foundry": @name || "" },
    { "pdf": "Age", "foundry": @data.details.age || "" },
    { "pdf": "Height", "foundry": @data.details.height || "" },
    { "pdf": "Weight", "foundry": @data.details.weight || "" },
    { "pdf": "Eyes", "foundry": @data.details.eyes || "" },
    { "pdf": "Skin", "foundry": @data.details.skin || "" },
    { "pdf": "Hair", "foundry": @data.details.hair || "" },
    { "pdf": "Faction Symbol Image", "foundry": "" }, /* Images are not supported */
    { "pdf": "Allies", "foundry": "" }, /* There is no field for this on the Foundry character sheet */
    { "pdf": "FactionName", "foundry": "" }, /* There is no field for this on the Foundry character sheet */
    { "pdf": "Backstory", "foundry": @data.details.biography.value?.replaceAll(/<[^>]*>/g, "").trim() },
    { "pdf": "Feat+Traits", "foundry": @items.filter(i => ['feat', 'trait'].includes(i.type)).slice(16).map(i => `${i.name} - ${i.data.data.source}`).join('\n') },
    { "pdf": "Treasure", "foundry": @items.filter(i => ['loot'].includes(i.type)).map(i => `${i.name} (${i.data.data.quantity})`).join(', ') },

    /* Page #3 */
    { "pdf": "Spellcasting Class 2", "foundry": @items.filter(i => i.type === 'class').map(i => `${i.name}`).join(' / ') }, /* Doesn't work with multiple classes properly */
    { "pdf": "SpellcastingAbility 2", "foundry": @data.attributes.spellcasting.capitalize() || "" },
    { "pdf": "SpellSaveDC 2", "foundry": String(@data.attributes.spelldc) || "" },
    { "pdf": "SpellAtkBonus 2", "foundry": "+" + String(@data.attributes.spelldc - 8) }, /* Doesn't account for negative values */
    /* Spellslots Max + counts*/
    /**{ "pdf": "SlotTotal 19", "foundry": @data.spells.spell1.max || "" },
    { "pdf": "SlotsRemaining 19", "foundry": @data.spells.spell1.value || "" },
    { "pdf": "SlotTotal 20", "foundry": @data.spells.spell2.max || "" }, 
    { "pdf": "SlotsRemaining 20, "foundry": @data.spells.spell2.value || "" },
    { "pdf": "SlotTotal 21", "foundry": @data.spells.spell3.max || "" }, 
    { "pdf": "SlotsRemaining 21, "foundry": @data.spells.spell3.value || "" },
    { "pdf": "SlotTotal 22", "foundry": @data.spells.spell4.max || "" }, 
    { "pdf": "SlotsRemaining 22", "foundry": @data.spells.spell4.value || "" },
    { "pdf": "SlotTotal 23", "foundry": @data.spells.spell5.max || "" }, 
    { "pdf": "SlotsRemaining 23", "foundry": @data.spells.spell5.value || "" },
    { "pdf": "SlotTotal 24", "foundry": @data.spells.spell6.max || "" }, 
    { "pdf": "SlotsRemaining 24", "foundry": @data.spells.spell6.value || "" },
    { "pdf": "SlotTotal 25", "foundry": @data.spells.spell7.max || "" }, 
    { "pdf": "SlotsRemaining 25", "foundry": @data.spells.spell7.value || "" },
    { "pdf": "SlotTotal 26", "foundry": @data.spells.spell8.max || "" }, 
    { "pdf": "SlotsRemaining 26", "foundry": @data.spells.spell8.value || "" },
    { "pdf": "SlotTotal 27", "foundry": @data.spells.spell9.max || "" }, 
    { "pdf": "SlotsRemaining 27", "foundry": @data.spells.spell9.value || "" },*/
    /* Cantrips */
    /**{ "pdf": "Spells 1014", "foundry": @items.filter(i => i.type === 'spell' && i.data.data.level === 0)[1]?.name || "" },
    { "pdf": "Spells 1016", "foundry": @items.filter(i => i.type === 'spell' && i.data.data.level === 0)[1]?.name || "" },
    { "pdf": "Spells 1017", "foundry": @items.filter(i => i.type === 'spell' && i.data.data.level === 0)[2]?.name || "" },
    { "pdf": "Spells 1018", "foundry": @items.filter(i => i.type === 'spell' && i.data.data.level === 0)[3]?.name || "" },
    { "pdf": "Spells 1019", "foundry": @items.filter(i => i.type === 'spell' && i.data.data.level === 0)[4]?.name || "" },
    { "pdf": "Spells 1020", "foundry": @items.filter(i => i.type === 'spell' && i.data.data.level === 0)[5]?.name || "" },
    { "pdf": "Spells 1021", "foundry": @items.filter(i => i.type === 'spell' && i.data.data.level === 0)[6]?.name || "" },
    { "pdf": "Spells 1022", "foundry": @items.filter(i => i.type === 'spell' && i.data.data.level === 0)[7]?.name || "" },*/
    /* 1st Level Spells */
    /**{ "pdf": "Spells 1015", "foundry": @items.filter(i => i.type === 'spell' && i.data.data.level === 1)[2]?.name || "" },
    { "pdf": "Check Box 251", "foundry": @items.filter(i => i.type === 'spell' && i.data.data.level === 1)[2]?.preparation.prepared === true ? "x" : "" || "" },
    { "pdf": "Spells 1022", "foundry": @items.filter(i => i.type === 'spell' && i.data.data.level === 1)[3]?.name || "" },
    { "pdf": "Check Box 309", "foundry": @items.filter(i => i.type === 'spell' && i.data.data.level === 1)[3]?.preparation.prepared === true ? "x" : "" || "" },
    { "pdf": "Spells 1024", "foundry": @items.filter(i => i.type === 'spell' && i.data.data.level === 1)[2]?.name || "" },
    { "pdf": "Check Box 3010", "foundry": @items.filter(i => i.type === 'spell' && i.data.data.level === 1)[2]?.preparation.prepared === true ? "x" : "" || "" },
    { "pdf": "Spells 1025", "foundry": @items.filter(i => i.type === 'spell' && i.data.data.level === 1)[3]?.name || "" },
    { "pdf": "Check Box 3011", "foundry": @items.filter(i => i.type === 'spell' && i.data.data.level === 1)[3]?.preparation.prepared === true ? "x" : "" || "" },
    { "pdf": "Spells 1026", "foundry": @items.filter(i => i.type === 'spell' && i.data.data.level === 1)[4]?.name || "" },
    { "pdf": "Check Box 3012", "foundry": @items.filter(i => i.type === 'spell' && i.data.data.level === 1)[4]?.preparation.prepared === true ? "x" : "" || "" },
    { "pdf": "Spells 1027", "foundry": @items.filter(i => i.type === 'spell' && i.data.data.level === 1)[5]?.name || "" },
    { "pdf": "Check Box 3013", "foundry": @items.filter(i => i.type === 'spell' && i.data.data.level === 1)[5]?.preparation.prepared === true ? "x" : "" || "" },
    { "pdf": "Spells 1028", "foundry": @items.filter(i => i.type === 'spell' && i.data.data.level === 1)[6]?.name || "" },
    { "pdf": "Check Box 3014", "foundry": @items.filter(i => i.type === 'spell' && i.data.data.level === 1)[6]?.preparation.prepared === true ? "x" : "" || "" },
    { "pdf": "Spells 1029", "foundry": @items.filter(i => i.type === 'spell' && i.data.data.level === 1)[7]?.name || "" },
    { "pdf": "Check Box 3015", "foundry": @items.filter(i => i.type === 'spell' && i.data.data.level === 1)[7]?.preparation.prepared === true ? "x" : "" || "" },
    { "pdf": "Spells 1030", "foundry": @items.filter(i => i.type === 'spell' && i.data.data.level === 1)[8]?.name || "" },
    { "pdf": "Check Box 3016", "foundry": @items.filter(i => i.type === 'spell' && i.data.data.level === 1)[8]?.preparation.prepared === true ? "x" : "" || "" },
    { "pdf": "Spells 1031", "foundry": @items.filter(i => i.type === 'spell' && i.data.data.level === 1)[9]?.name || "" },
    { "pdf": "Check Box 3017", "foundry": @items.filter(i => i.type === 'spell' && i.data.data.level === 1)[9]?.preparation.prepared === true ? "x" : "" || "" },
    { "pdf": "Spells 1032", "foundry": @items.filter(i => i.type === 'spell' && i.data.data.level === 1)[10]?.name || "" },
    { "pdf": "Check Box 3018", "foundry": @items.filter(i => i.type === 'spell' && i.data.data.level === 1)[10]?.preparation.prepared === true ? "x" : "" || "" },
    { "pdf": "Spells 1033", "foundry": @items.filter(i => i.type === 'spell' && i.data.data.level === 1)[11]?.name || "" },
    { "pdf": "Check Box 3019", "foundry": @items.filter(i => i.type === 'spell' && i.data.data.level === 1)[11]?.preparation.prepared === true ? "x" : "" || "" },*/
    
    { "pdf": "", "foundry": "" }
]
